@startuml

skinparam monochrome true
skinparam classBackgroundColor transparent
skinparam style strictuml
'元素：callFactory 封装OkHttp请求，baseUrl服务器地址,Converter 序列化和反序列化,CallAdapter response转化为所要的类型,callBackExecutor 请求分发
'主要进行请求和返回的数据格式进行转化。动态代理和反射进行请求数据的封装。
/'
1)Gson: compile 'com.squareup.retrofit2:converter-gson:2.0.1'

2)Jackson: compile 'com.squareup.retrofit2:converter-jackson:2.0.1'

3)Moshi: compile 'com.squareup.retrofit2:converter-moshi:2.0.1'

4)Protobuf: compile 'com.squareup.retrofit2:converter-protobuf:2.0.1'

5)Wire: compile 'com.squareup.retrofit2:converter-wire:2.0.1'

6)Simple XML: compile 'com.squareup.retrofit2:converter-simplexml:2.0.1'

7)Scalars (primitives, boxed, and String): compile 'com.squareup.retrofit2:converter-scalars:2.0.1'
'/


'动态代理和反射
class Retrofit{
	'OkHttpClient对象
	okhttp3.Call.Factory callFactory;
	HttpUrl baseUrl;
	'UnmodifiableList,json转化器
	List<Converter.Factory> converterFactories;
	'UnmodifiableList,Rx转化器
	List<CallAdapter.Factory> adapterFactories;
	'Android平台封装了主线程的Handler
	Executor callbackExecutor;
	boolean validateEagerly;

	- Map serviceMethodCache;'<Method, ServiceMethod>
	'动态代理模式。当自定义类调用方法时候，触发动态代理
	create()
	
	'构建者模式
	
}
class Retrofit.Builder{
		Platform platform;
		HttpUrl baseUrl;
		'callAdapter调用nextCallAdapter，返回 retrofit服务类方法的返回类型，对应的Adapter。
		'默认返回的是CallAdapter对象，该对象adapt()方法返回的是ExecutorCallbackCall
		callAdapter()
		nextCallAdapter()
		'方法内的callFactory初始化，可以看出是依赖OkHttpClient
		build()
}
'java动态代理
class Proxy{
	newProxyInstance()
}

class ServiceMethod{
	Converter<ResponseBody, T> responseConverter;
	'创建Adapter，调用retrofit对象的callAdapter方法
	createCallAdapter()

	'解析response返回类型的CallAdapter
	createResponseConverter()
	'将OkHttp库的okhttp3.Response对象，转化为Retrofit库的带泛型的retrofit.Response对象。其中泛型是ServiceMethod代理的接口的方法中的泛型
	toResponse(Response response)
	'构造Okhttp的Request对象
	Request toRequest()
	'构建calladapter和converter
	build()
}

class OkHttpCall{
	'an invocation of an interface method into an HTTP call.
	ServiceMethod serviceMethod
	Object[] args
	okhttp3.Call createRawCall()
}

interface Converter{
	
	 
}
abstract class Converter.Factory {

}
'泛型T 是response的需要解析为返回类型
interface Call{
	execute();
	enqueue(Callback callback)
}
//默认实现Call
class ExecutorCallbackCall implement Call{
	
}
'适配器模式,根据返回retrofit自定义服务类的方法返回的类型，决定CallAdpter类中adapte()方法返回的处理对象
'默认返回的是ExecutorCallbackCall对象，Rxjava返回的是Observable对象，
class CallAdapter{
	
}
ExecutorCallAdapterFactory +--ExecutorCallbackCall
class OkHttpCall{
	
}
'只能处理类型为RequestBody,ResponseBody序列化与反序列化，ResponseBody为OkHttp的返回类型
class BuiltInConverters  extends Converter.Factory{

}
'适配器和责任链模式
class RequestBodyConverter implements Converter{

}
'单例模式
class StreamingResponseBodyConverter implements Converter{
	
}
class BufferingResponseBodyConverter implements Converter{
	
}
class VoidResponseBodyConverter implements Converter{
	
}
BuiltInConverters ..>StreamingResponseBodyConverter
BuiltInConverters ..>BufferingResponseBodyConverter
BuiltInConverters ..>VoidResponseBodyConverter
BuiltInConverters ..>RequestBodyConverter

abstract class Converter.Factory{
	 public Converter<ResponseBody, ?> responseBodyConverter();
    public Converter<?, RequestBody> requestBodyConverter() ;
    public Converter<?, String> stringConverter() ;
}

class RestAdapter{
	
}
'工厂方法模式
class ExecutorCallAdapterFactory {
	Executor callbackExecutor;
	Call delegate;
	'代理模式

}
ExecutorCallAdapterFactory --|> CallAdapter.Factory
class ExecutorCallbackCall implements Call{
	Executor callbackExecutor;
	Call delegate;
}
ExecutorCallAdapterFactory +-- ExecutorCallbackCall

'代理模式 代理真正的Response
class ExceptionCatchingRequestBody extends ResponseBody{
	ResponseBody delegate;
}

package adapter-rxjava{
	'处理retrofit库自定义服务类中方法返回的类型是Observable的方法
	class RxJavaCallAdapterFactory{

	}
	class CompletableCallAdapter implements CallAdapter{

	}
	class ResultCallAdapter implements CallAdapter{

	}
	class ResponseCallAdapter implements CallAdapter{

	}
	class SimpleCallAdapter implements CallAdapter{
	
	}

	RxJavaCallAdapterFactory --|> CallAdapter.Factory
	RxJavaCallAdapterFactory +--SimpleCallAdapter
}

Converter +.. Factory
Retrofit +.. Retrofit.Builder
'retrofit中，自定义服务接口调用到的方法代理
Retrofit ..>Proxy 
InvocationHandler ..>ServiceMethod
InvocationHandler ..>OkHttpCall
OkHttpCall-->ServiceMethod
Proxy ..>InvocationHandler
Call ..>Response
BuiltInConverters --|>Converter.Facotry

ServiceMethod-->ExecutorCallbackCall
Call -->ExceptionCatchingRequestBody
OkHttpCall+--ExceptionCatchingRequestBody

Retrofit-->Converter.Factory
Retrofit-->CallAdapter.Factory
@enduml