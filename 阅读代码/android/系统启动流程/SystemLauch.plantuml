@startuml

skinparam monochrome true
skinparam classBackgroundColor transparent
skinparam style strictuml
skinparam shadowing false

class Bootloader{

}
note top of Bootloader 
手机上电后，硬件会从固定的地址（固化在ROM中）加载bootloader到RAM。
作用是硬件初始化
end note
Bootloader --> init_cpp :加载boot.img文件，开始调用内核

class init_cpp {
	main()
	LoadBootScripts()
}


note top of init_cpp
源码地址 https://www.androidos.net.cn/
http://www.cnblogs.com/rocomp/p/5001639.html
init进程 –> Zygote进程 –> SystemServer进程 –>各种应用进程

1.首先Bootloader引导程序启动完Linux内核后，
会加载各种驱动和数据结构，
当有了驱动以后，开始启动Android系统，
同时会加载用户级别的第一个进程init(system/core/init/init.cpp),
执行 main 方法,该进程会首先加载一个 init.rc 配置文件

2.init进程有几个阶段。
挂载分区,创建设备节点和一些关键目录,启用SELinux安全策略；
初始化属性系统和SELinux系统；
加载一个 init.rc 配置文件；

3.init.rc 通过LoadBootScripts一些业务被分拆不同目录下

end note

class init_rc{
	

}
note top of init_rc
 
Android Init Language语法：定义在platform/system/core/init/README.md
文件位于 platform/system/core/rootdir/init.rc

init.rc配置文件会进行很多的配置，
创建很多的文件夹及文件，
然后初始化一些Android驱动器，
之后该配置文件最重要的一个任务就是启动一个Zygote(孵化器)进程，
此进程是Android系统的一个母进程，
用来启动Android的其他服务进程
end note

class app_main_cpp{
	
}
note top of app_main_cpp

init.cpp 调用 am.QueueEventTrigger("late-init");，触发 init.rc 执行命令，调用zygote进程
zygote进程调用二进制文件是 /system/bin/app_process64，
即frameworks/base/cmds/app_process/Android.mk 定义的app_main.cpp文件

end note

class AndroidRuntime_cpp{
	start()
	onVmCreated() start方法创建完虚拟机后调用

	callMain() 执行CallStaticVoidMethod 最终将调用com.android.internal.os.ZygoteInit的main函数。
}
note top of AndroidRuntime_cpp

定义在 app_main.cpp文件内.
实现在 platform/frameworks/base/core/jni/AndroidRuntime.cpp

虚拟机创建完后，可以调用java文件了，返回app_main.cpp，反射调用了ZygoteInit.java，
这就从c++代码跳到了java代码
end note



class ZygoteInit {
	+ {static} void main(String argv[])
	- static void registerZygoteSocket(String socketName)
	static void preload()
	/**
	** Zygote fork出SystemServer进程
	**/
	- static boolean startSystemServer(String abiList, String socketName)
}

note left of ZygoteInit
在ZytofeInit.java代码中首先设置了Java虚拟机的堆内存空间，
然后启动一个类加载器加载Android启动依赖的类比如Activity等四大组件，
dialog等UI的类，然后分出一个子进程启动SystemServer系统服务.

android系统中进程之间通讯的方式是Binder，
但是有一个例外是SystemService进程与Zygote进程之间是通过Socket的方式进行通讯的

preloadClasses()用于初始化Zygote中需要的class类； 
preloadResources()用于初始化系统资源； 
preloadOpenGL()用于初始化OpenGL； 
preloadSharedLibraries()用于初始化系统libraries； 
preloadTextResources()用于初始化文字资源； 
prepareWebViewInZygote()用于初始化webview;
end note

class RuntimeInit{

	//ZygoteInit 执行到 invokeStaticMain 调用com.android.server.SystemServer类的main函数
}
 

class Zygote{
	- static final ZygoteHooks VM_HOOKS = new ZygoteHooks();
	- static int forkSystemServer()
	native - static int nativeForkSystemServer()
}
class ZygoteHooks {
	
}

class SystemServer {
	- ActivityManagerService mActivityManagerService;
	- PackageManagerService mPackageManagerService;

	+ {static}  void main(String[] args)
	- void run()

	- void startBootstrapServices()
	- void startCoreServices()
	- void startOtherServices()
}
note top of SystemServer
在SystemServer.java代码中有两个方法

startBootstrapServices() 主要用于启动系统Boot级服务 
startCoreServices() 主要用于启动系统核心的服务 
startOtherServices() 主要用于启动一些非紧要或者是非需要及时启动的服务


end note


class SystemServiceManager {
	- final ArrayList<SystemService> mServices = new ArrayList<SystemService>();
}
note right of SystemServiceManager

SystemServer进程主要是用来构建系统各种service服务的，
而SystemServiceManager就是这些服务的管理对象。
end note


class com_android_server_SystemServer_cpp {
	int system_init();

}
note top of com_android_server_SystemServer_cpp
SystemServer首先调用init1()方法加载JNI库，
启动Native世界。
init1通过System.loadLibrary("android-servers")加载一个类库文件，
其对应的源码文件为com_android_server_SystemServer.cpp 
其C++代码如下，在该类库中转调了system_init()
end note


class System_init_cpp{
	int system_init();
}
note left of System_init_cpp
System_init方法在System_init.cpp中实现，
它首先启动系统的硬件服务，比如Audio、Camera等，
启动完硬件服务后它又通过Android运行时环境调用了
SystemServer中的init2()方法，
init2()方法启动Framework世界
end note

class ServerThread {
	
}
note top of ServerThread
init2()启动的线程ServerThread中的的run方法中
通过一个Looper开启了Android中的各种服务比如LightService，
PowerManagerService，BatteryService，WindowManagerService等，
并将服务添加到ServiceManager中去管理
end note

class ActivityManagerService {
	final ActivityStarter mActivityStarter;


	+ void systemReady(final Runnable goingCallback)
	# boolean startHomeActivityLocked(int userId, String reason)
	# Intent getHomeIntent()
}
note left of ActivityManagerService
	启动完各种服务后，调用ActivityManagerService.systemReady方法,
	打开Android系统的第一个Activity
	<pre>
		 mActivityStarter.startHomeActivityLocked(intent, aInfo, reason);
	</pre>

end note
class ActivityStarter {
	void startHomeActivityLocked(Intent intent, ActivityInfo aInfo, String reason)
	final void scheduleResumeTopActivities()
}

class ActivityStackSupervisor{
	final void scheduleResumeTopActivities()

}




init_cpp --> init_rc
init_rc --> app_main_cpp

app_main_cpp --> AndroidRuntime_cpp
AndroidRuntime_cpp --> ZygoteInit :初始化zygote进程
AndroidRuntime_cpp --> RuntimeInit :启动普通应用程序
ZygoteInit --> RuntimeInit
RuntimeInit --> SystemServer
SystemServer --> com_android_server_SystemServer_cpp
com_android_server_SystemServer_cpp --> System_init_cpp
System_init_cpp --> SystemServer
SystemServer --> ServerThread
ServerThread --> ActivityManagerService
ActivityManagerService --> ActivityStarter
ActivityStarter --> ActivityStackSupervisor
ZygoteInit ..> Zygote
Zygote ..> ZygoteHooks
SystemServer --> SystemServiceManager
SystemServiceManager --> SystemServer


abstract class SystemService{
	
}
class Installer extends SystemService{
	- final InstallerConnection mInstaller;
	
}
class InstallerConnection {
	public void waitForConnection()
}
note right of InstallerConnection

不断的通过ping命令连接Zygote进程
（SystemServer和Zygote进程通过socket方式通讯，其他进程通过Binder方式通讯）
end note


class ActivityManagerService extends ActivityManagerNative{
	
}
note right of ActivityManagerService
为其设置SysServiceManager和Installer。
ActivityManagerService是系统中一个非常重要的服务，
Activity，service，Broadcast，contentProvider都需要通过其余系统交互。
end note


class Lifecycle extends SystemService{
	private final ActivityManagerService mService;
}

class PowerManagerService extends SystemService{
	
}
note right of PowerManagerService
PowerManagerService主要用于计算系统中和Power相关的计算，
然后决策系统应该如何反应。
同时协调Power如何与系统其它模块的交互，
比如没有用户活动时，屏幕变暗等等。
end note
class LightsService extends SystemService{
	
}

note right of LightsService
手机中关于闪光灯，LED等相关的服务
end note

class DisplayManagerService extends SystemService{
	
}

class PackageManagerService extends IPackageManager.Stub{
	public static PackageManagerService main()

}
note right of PackageManagerService
apk文件的安装，解析，删除，卸载等等操作。

end note
SystemServer ..> Installer

Installer --> InstallerConnection

Lifecycle --+ ActivityManagerService
SystemServer --> ActivityManagerService
Lifecycle --> ActivityManagerService
SystemServer --> PowerManagerService
SystemServer ..> LightsService
SystemServer --> DisplayManagerService

SystemServer --> PackageManagerService



/'
root@android:/ # ps
USER     PID   PPID  VSIZE  RSS     WCHAN    PC         NAME
root      1     0     420    248   c01bad0a 08054826 S /init
root      2     0     0      0     c013aef2 00000000 S kthreadd
root      3     2     0      0     c0129129 00000000 S ksoftirqd/0
root      4     2     0      0     c01375c3 00000000 S kworker/0:0
root      5     2     0      0     c01375c3 00000000 S kworker/u:0
root      6     2     0      0     c01611c4 00000000 S migration/0
root      7     2     0      0     c0136c9d 00000000 S khelper
root      8     2     0      0     c0197604 00000000 S sync_supers
root      9     2     0      0     c0198197 00000000 S bdi-default
root      10    2     0      0     c0136c9d 00000000 S kintegrityd
root      11    2     0      0     c0136c9d 00000000 S kblockd
root      12    2     0      0     c0136c9d 00000000 S ata_sff
root      13    2     0      0     c038380b 00000000 S khubd
root      14    2     0      0     c01375c3 00000000 S kworker/0:1
root      16    2     0      0     c0191c27 00000000 S kswapd0
root      17    2     0      0     c01d7fdd 00000000 S fsnotify_mark
root      18    2     0      0     c0136c9d 00000000 S crypto
root      31    2     0      0     c01375c3 00000000 S kworker/u:1
root      32    2     0      0     c032aaec 00000000 S scsi_eh_0
root      33    2     0      0     c032aaec 00000000 S scsi_eh_1
root      34    2     0      0     c01375c3 00000000 S kworker/u:2
root      35    2     0      0     c0136c9d 00000000 S kpsmoused
root      36    2     0      0     c0136c9d 00000000 S binder
root      37    2     0      0     c01375c3 00000000 S kworker/u:3
root      38    2     0      0     c01375c3 00000000 S kworker/0:2
root      39    2     0      0     c0511c67 00000000 S krfcommd
root      40    2     0      0     c0136c9d 00000000 S deferwq
root      41    1     424    4     c01bad0a 08054826 S /sbin/ueventd
root      47    2     0      0     c02473d3 00000000 S jbd2/sda6-8
root      48    2     0      0     c0136c9d 00000000 S ext4-dio-unwrit
root      49    2     0      0     c02473d3 00000000 S jbd2/sdb1-8
root      50    2     0      0     c0136c9d 00000000 S ext4-dio-unwrit
root      51    2     0      0     c02473d3 00000000 S jbd2/sdb3-8
root      52    2     0      0     c0136c9d 00000000 S ext4-dio-unwrit
root      53    2     0      0     c0136c9d 00000000 S iprt
root      56    1     11524  2136  ffffffff b7488f80 S /system/bin/genyd
radio     57    1     6052   928   c02eb151 b75c9a0e S /system/bin/logwrapper
shell     58    1     6396   1376  c02eb151 b7591a0e S /system/bin/sh
root      59    1     6864   180   ffffffff 0805a18c S /sbin/adbd
radio     61    57    8404   1176  ffffffff b75aee53 S /system/bin/genybaseband
root      95    1     2096   184   c01bad0a b76a15ba S /sbin/v86d
system    141   1     6208   928   c03ea413 b75addbe S /system/bin/servicemanager
root      142   1     10364  1556  ffffffff b75b29c1 S /system/bin/vold
root      143   1     6260   1180  c0438608 b75dda0e S /system/bin/vinput
root      144   1     6244   952   c01bad0a b74f8f80 S /system/bin/vinput_seamless
root      145   1     42120  3824  ffffffff b75c6f80 S /system/bin/local_opengl
root      146   1     6244   948   c013e7b8 b75649c1 S /system/bin/local_gps
root      147   1     9716   948   c01bad0a b75adf80 S /system/bin/local_camera
root      148   1     9720   948   c01bad0a b7579f80 S /system/bin/local_camera
root      149   1     16224  1996  ffffffff b755b9c1 S /system/bin/netd
root      150   1     6336   976   c043e1df b7518e53 S /system/bin/debuggerd
radio     151   1     11152  1584  ffffffff b75829c1 S /system/bin/rild
system    152   1     71700  6720  ffffffff b75b1dbe S /system/bin/surfaceflinger
root      153   1     482668 42872 ffffffff b759cf80 S zygote
drm       154   1     16660  3868  ffffffff b7543dbe S /system/bin/drmserver
media     155   1     48052  9072  ffffffff b7584dbe S /system/bin/mediaserver
bluetooth 156   1     7172   1760  c01bad0a b74d15ba S /system/bin/dbus-daemon
root      157   1     6280   1204  c04c6d47 b758ea0e S /system/bin/installd
keystore  158   1     8044   1724  c043e1df b7542e53 S /system/bin/keystore
root      166   59    6396   1384  c02eb151 b74efa0e S /system/bin/sh
root      186   59    6388   1436  c01bad0a b755ef80 S logcat
root      326   2     0      0     c01c9e92 00000000 S flush-8:16
system    342   153   566708 40880 ffffffff b759cdbe S system_server
wifi      409   1     9364   2244  c01bad0a b74dff80 S /system/bin/wpa_supplicant
u0_a40    417   153   518828 61408 ffffffff b759e507 S com.android.systemui
u0_a20    465   153   492044 30352 ffffffff b759e507 S com.android.inputmethod.latin
radio     478   153   508172 30668 ffffffff b759e507 S com.android.phone
u0_a21    494   153   522488 42980 ffffffff b759e507 S com.android.launcher
system    508   153   495692 25680 ffffffff b759e507 S com.android.settings
u0_a0     542   153   515184 37428 ffffffff b759e507 S android.process.acore
u0_a45    560   153   488912 23148 ffffffff b759e507 S com.android.smspush
u0_a12    639   153   491392 26344 ffffffff b759e507 S com.android.deskclock
u0_a0     669   153   495288 26256 ffffffff b759e507 S com.android.contacts
dhcp      713   1     6396   1216  c01bad0a b758c5ba S /system/bin/dhcpcd
u0_a58    725   153   500268 32052 ffffffff b759e507 S cn.trinea.android.developertools
u0_a7     743   153   490696 26688 ffffffff b759e507 S com.android.providers.calendar
u0_a14    761   153   492592 29064 ffffffff b759e507 S android.process.media
u0_a15    811   153   499728 28940 ffffffff b759e507 S com.android.email
u0_a16    837   153   496368 24912 ffffffff b759e507 S com.android.exchange
u0_a26    856   153   494824 27188 ffffffff b759e507 S com.android.mms
u0_a43    907   153   489048 23164 ffffffff b759e507 S com.android.voicedialer
u0_a52    919   153   516232 39744 ffffffff b759e507 S com.wandoujia.phoenix2:channel
u0_a52    944   153   555436 50004 ffffffff b759e507 S com.wandoujia.phoenix2
u0_a6     959   153   495556 25872 ffffffff b759e507 S com.android.calendar
u0_a51    1008  153   493688 26224 ffffffff b759e507 S com.wandoujia.phoenix2.usbproxy
u0_a52    1056  944   7104   1172  ffffffff b7df5a0e S uuids_sys
u0_a52    1075  153   505708 36844 ffffffff b759e507 S com.wandoujia.phoenix2:update_service
u0_a48    1087  153   505316 34112 ffffffff b759e507 S com.woqutz.didi
root      1193  2     0      0     c01c9e92 00000000 S flush-8:32
root      1234  59    6396   1388  c010230d b75a7caa S /system/bin/sh
root      1239  1234  6440   1220  00000000 b7592a0e R ps


查看进程的线程
root@android:/ # ps -T -p 153

'/



@enduml