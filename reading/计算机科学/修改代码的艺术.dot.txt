digraph g{
	书名->"24 项解依赖技术"
	书名->遗留代码
	书名[label="修改代码的艺术"]

	书名->{修改机理,修改代码的技术,解依赖技术}
	修改机理->{修改软件,带着反馈工作,感知和分离,接缝模型,工具}
	修改软件->修改软件的四个起因->{"添加特性和修正 bug","改善设计","优化","综合起来"}
	修改软件的四个起因->改变的内容：结构、功能以及资源使用
	修改软件->危险修改

	带着反馈工作->{单元测试,高层测试,测试覆盖}

	测试覆盖->依赖性->解除依赖性以便使改动变得更容易
	带着反馈工作->遗留代码修改算法

	遗留代码修改算法->{确定修改点,找出测试点,依赖性,编写测试,改动和重构,其他内容}
	其他内容->感知、分离和接缝


	感知和分离->{伪装合作者}

	伪装合作者->{伪对象,伪对象的两面性,伪对象手法的核心理念,仿对象}

	接缝模型->{一大段文本,接缝,接缝类型}

	接缝->"A seam is a place where you can alter behavior in your program without editing in that place."
	预处理期接缝->激活点->"Every seam has an enabling point, a place where you can make the decision to use one behavior or another."
	接缝类型->{预处理期接缝,连接期接缝,对象接缝}

	工具->自动化重构工具->"重构的定义，见 Martin Fowler《重构》,对软件内部结构的一种调整，目的是在不改变软件的外在行为的前提下，提供其可理解性，降低其修改成本"
	工具->仿对象
	工具->单元测试用具->{JUnit,CppUnitLite,NUnit,"其他 xUnit 框架"}
	"其他 xUnit 框架"->"www.xprogramming.com"
	工具->一般测试用具->{集成测试框架,Fitnesse}






	修改代码的技术->{时间紧迫、但必须修改,漫长的修改,添加特性,无法将类放入测试用具中,修改时应当测试哪些方法,在同一地进行多处测试、是否应该将相关类都解依赖,修改时应该怎样写测试,棘手的库依赖问题,"到处都是 API 调用",对代码的理解不足,应用毫无结构可言,测试代码碍手碍脚,对非面向对象的项目、如何安全地对它进行修改,处理大类,需要修改大量相同的代码,修改一个巨型方法，却没法为它编写测试,降低修改的风险,当你感到绝望时}

	时间紧迫、但必须修改->{新生方法,新生类,外覆方法,外覆类}
	外覆方法->时间耦合

	解依赖技术->{参数适配,分离出方法对象,定义补全,封装全局引用,暴露静态方法,提取并重写调用,提取并重写工厂方法,提取并冲切获取方法,实现提取,接口提取,引入实例委托,引入静态设置方法,连接替换,参数化构造函数,朴素化参数,特性提升,依赖下推,换函数为函数指针,以获取方法替换全局引用,子类化并重写方法,替换实例变量,模板重定义,文本重定义}

	书名->"附录 重构"->{方法提取}
	书名->术语表


}