digraph g{
	rankdir=LR;
	"UNIX shell 范例精解"->{"UNIX/Linux shell 简介","shell 编程快速入门","正则表达式与模式匹配","grep 家族","流编辑器 sed","awk 实用程序","交互式的 Bourne shell","Bourne shell 编程","交互式 C shell 与 TC shell","C shell 与 TC shell 编程","交互式 Korn shell","Korn shell 编程","交互式 bash shell","bash shell 编程","调试 shell 脚本","系统管理员与 shell",附录}

	"UNIX/Linux shell 简介"->"两个主要的 UNIX版本"->{"AT&T 的 System V","BSD UNIX"}
	"UNIX/Linux shell 简介"->Linux->"Linux 吉祥物 Tux"
	Linux->"1992 年GNU软件加入 Linux 内核中以使其成为一个完整的操作系统"->"GNU工具"->"GNU shell 非标准的 UNIX shell"
	Linux->"GPL通用公共许可证"

	"UNIX/Linux shell 简介"->"shell 的定义与功能"->{"shell 是一种特殊的程序，内核以外的所有其它程序（包括 shell 程序）都保存在磁盘上，运行时才加载到内存中"}
	"shell 的定义与功能"->"用户登录成功后，系统会启动一个交互式的 shell 提示用户输入命令"
	"shell 的定义与功能"->"shell 执行"->"先解析命令行，再处理通配符、重定向、管道和作业控制，然后 查找命令，找到后开始执行"
	"shell 的定义与功能"->"shell 的功能需求在 POSIX 标准中定义，即 POSIX 1003.2"
	"shell 的定义与功能"->"当用户从脚本中执行命令时，shell 被视作一种编程语言"

	"shell 的定义与功能"->"UNIX 系统大都支持 3 种主流的 shell"->{"Bourne shell（AT&T shell）","C shell（Berkeley shell）","Korn shell（Bourne shell的拓展集）"}
	"shell 的定义与功能"->"Linux的 shell"->"默认是 GNU bash,即 Bourne again shell"
	"Linux的 shell"->"TC shell，UNIX C shell的一个兼容分支"

	"Linux的 shell"->{"Z shell",pdksh}
	"Linux的 shell"->"查看 Linux 的 shell，『 $ cat /etc/shell 』"

	"shell 的定义与功能"->"shell 的历史"->{"shell 的作用","shell 的职责"}

	"shell 的定义与功能"->"系统启动与登录 shell"->"第一个进程 init"->"终端提示登录"->"『 /bin/login』登录成功，执行『 passwd 文件』最后一行的程序，通常是 shell"

	"系统启动与登录 shell"->解析命令行->"token"->"shell 会读入命令行并对命令进行解析，将其分解成词"
	"系统启动与登录 shell"->命令类型

	"shell 的定义与功能"->"进程与 shell"->"进程是正在执行的程序，内核负责控制和管理进程。进程可以由可执行程序、进程的数据和堆栈、程序指针和堆栈指针、寄存器以及程序运行是需要的所有信息组成"
	"进程与 shell"->"查看正在运行的进程『ps aux』"->"查看进程运行情况及子进程的方法 pstree（Linux）或 ptree（Solaris）"

	"进程与 shell"->{创建进程}
	创建进程->{"系统调用 fork","系统调用 wait","系统调用 exec","系统调用 exit","终止进程"}

	"系统调用 wait"->"父进程先于子进程死亡，init 进程会处理遗留的僵尸子进程，否则需要重启系统"
	"系统调用 exit"->"查看退出状态 『echo $status』"


	"shell 的定义与功能"->"环境与继承"->{所有权,为文件创建掩码,修改权限与所有者,工作目录,变量,重定向与管道}
	所有权->{UID,GID,EUID,EGID}
	UID->"id 命令，查看 shell 的 UID"

	为文件创建掩码->"创建文件是，会得到一组默认的权限。这组权限由创建文件的进程确定"
	为文件创建掩码->"改变shell的掩码"->{"umask命令，当前掩码中除去某些权限","shell 初始化文件中设置"}

	变量->"shell 定义了两类变量"->{局部变量,环境变量}

	局部变量->"只属于创建他们的 shell，不会传给派生的任何子进程"

	重定向与管道->{文件描述符,重定向,管道,"shell 和信号"}
	文件描述符->"所有I/O，包括文字、管道和套接字，都是由内核通过一种名为文件描述符的机制进行管理的"
	文件描述符->"文件描述符是一个比较小的无符号整数，是文件描述符表的索引。文件描述符表由内核维护，内核用它访问打开的文件和 I/O 流"

	重定向->"当文件描述符被分配给终端以外的对象时，就被称为 I/O 重定向"
	管道->管道只是一个内核缓冲区，两个进程通过它来共享数据，而不需要临时的中间文件
	管道->"pipe命令的语法为：who | wc"
	"shell 和信号"->信号把消息发给进程，结果常常导致该进程终止
	"shell 和信号"->"键入 Break、Delete、Quit 或 Stop"

	"shell 的定义与功能"->在脚本中执行命令->"命令和 shell 程序可以通过编辑器输入并保持为文件，即脚本"


	//第二章
	"shell 编程快速入门"->"Bash shell 结构"->{"shbang 行","注释","通配符","显示输出","局部变量","全局变量","提取变量值","读取变量值","参数","数组","命令替换","算术运算",运算符,条件语句,循环语句,函数}
	"shbang 行"->"#!/bin/bash"
	"注释"->"#"
	"通配符"->"*、？和 [] 好常用于文件拓展\l <、>、2>、>> 和 | 则用户标准 I/O 重定向和管道"
	"显示输出"->echo
	"局部变量"->"declare"
	"全局变量"->"export 或 declare -x"
	"提取变量值"->"$variable_name"
	"读取变量值"->"read variable_name"

	"参数"->"命令行：\l $scriptname arg1 arg2 \l 脚本里：\lecho $1 $2 ：位置参数\l echo $* ：所有位置的参数\l echo $# ：位置参数的个数"

	"数组"->"declare -a \ldeclare -a array_name={word1 word2} \l echo ${array_name[0]}"



	//第三章 
	"正则表达式与模式匹配"->正则表达式->"字符模式，用于在查找过程中匹配指定的字符"
	正则表达式->元字符->{"shell 元字符","正则表达式元字符"}
	"shell 元字符"->"由 UNIX/Linux 的 shell 来解析"

	"正则表达式元字符"->由各种执行模式匹配操作的程序来解析
	"正则表达式元字符"->{"^，$，.，*，[]，[x-y]，[^]，\ ","UNIX/Linux支持的附加元字符：\<，\>，\(..\)，x\{m\} 或 x\{m,\}或x\{m,n\}"}

	"正则表达式与模式匹配"->组合正则表达式元字符

	"grep 家族"->"grep 家族由命令 grep、egrep 和 fgrep 组成"->"grep 命令在文件中全局查找指定的正则表达式，并打印所有包含该表达式的行"
	"grep 家族"->"grep 命令"->{"ex 编辑器","grep 元字符"}

	"grep 元字符"->{"grep 选项"}
	"grep 选项"[shape="record",label=" { -b | -c | -h | -i| -l| -n| -s| -v| -w}"]


	"grep 家族"->"grep 与管道"->"ls -l | grep '^d'"->"ls 命令的输出通过管道传给 grep"

	"grep 家族"->"egrep（拓展的grep）"
	"grep 家族"->"fgrep（固定的 grep 或快速的grep）"

	"grep 家族"->"Linux 与 GNU grep"

	"流编辑器 sed"->"sed 是一种非交互的编辑器，使用者只能在命令行输入编辑命令、指定文件名，然后在屏幕上查看输出"
	"流编辑器 sed"->"sedd 查找模式也使用正则表达式和各种元字符"
	"流编辑器 sed"->定址->决定对哪些行进行编辑
	"流编辑器 sed"->命令与选项

	"awk 实用程序"->"以逐行扫描文件（或输入），从第一行到最后一行，以查找匹配摸个特定模式的文本行，并对这些文本行执行指定动作"



	"交互式 bash shell"->环境->{"变量,打开的文件,当前的工作目录,函数,资源限额,信号等"}
	环境->提示符->"4种：$，>，PS3，PS4"

	环境->{搜索路径,"hash 命令",	"source 或 dot 命令"}


	"source 或 dot 命令"->"source 命令来自于 C shell"
	"交互式 bash shell"->"交互式 bash shell 简介"->"在 bash 提示符下键入 UNIX/Linux 命令，等待它的响应"
	"交互式 bash shell 简介"->"启动-> init->getty->logoin->bash"
	"交互式 bash shell"->命令行->{处理命令的顺序,命令编组}
	处理命令的顺序->"type 命令"
	"交互式 bash shell"->作业控制->"作业控制命令"->"bg，fg，jobs，kill，stop，stty tostop，wait ，Ctrl-Z"

	作业控制->"jobs 命令的参数"
	"交互式 bash shell"->命令行快捷方式->"hostroy 命令; fc命令"


	"交互式 bash shell"->{别名,操作目录栈,元字符（通配符）,文件名替换,变量,引用,_命令替换,算术扩展,扩展顺序,_数组,_函数,"标准 I/O 和重定向",管道,"shell 调用选项","shell 内置命令"}

	


	附录->{"常用的 UNIX/Linux 实用程序","各种shell的比较"}
	"各种shell的比较"->"Bounme, C, TC, Korn, bash"






































}