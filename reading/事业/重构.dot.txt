digraph g{
	//先看 《极限编程》、《人月神话》
	重构->序->在不改变软件可观察行为的前提下改善其内部结构
	//序->重构技术的最早提倡者->"Ward Cunningham 和 Kent Beck"
	//13章 Bill Opdyke ，14章 Don Reberts 和 John Brant，15章 Kent Beck
	// Rucj Garzaniti 和 Ron Jeffries 添加部分注解
	重构->"Martin Fowler"
	重构->{重构，第一个案例,重构原则,代码的坏味道,构建测试体系,重构列表,重新组织函数,在对象之间搬移特性,重新组织数据,简化条件表达式,简化函数调用,处理概括关系,大型重构,重构，复用与现实,重构工具,总结}

	重构原则->{重构的定义,重构的目的,何时重构,重构难题,重构与设计,重构与性能,重构的起源}
	何时重构->{三次法则,添加功能时,修补错误时,复审代码时}
	重构原则->"重构与间接层"->间接层的价值->{逻辑共享,分开解释意图和实现,隔离变化,封装条件逻辑}
	"重构与间接层"->间接层会导致程序愈加难以理解
	重构难题->{数据库,修改接口,难以通过重构手法完成的设计改动,何时不该重构}
	重构的起源->{"Ward Cunningham 和 Kent Beck","Smalltalk 社区的一位菱形 Ralph Johnson（Gof 之一）","Bill opdyke 是 Ralph 的博士研究生，提出“语义保持性重构”"}
	//共 22 个代码坏味道
	代码的坏味道->{重复代码,发散式变化,散弹式修改,依恋情结,数据泥团,基本类型偏执,"Switch 语句","过度耦合的消息链",中间人,狎昵关系,过多注释}

	//第5章 ~ 第12章 重构手法
	重构列表->重构的记录格式

	//13章 ~ 15章 其他人重构的研究成果 

	重构，复用与现实->"William Opdyke"->"经验是无可替代的"

	重构工具->"Don Reberts 和 John Brant"
	总结->"“两顶帽子”的比喻，向我们解释了有些时候我们是在添加新的功能（添加功能帽子），而另外一些时候我们是在改善既有代码的质量（重构帽子）"
	参考书目

}