digraph g{
	rankdir=LR;
	"Unix 操作系统设计"->{系统概貌,内核结构概貌,系统缓冲区高速缓存机制,存取用户文件,文件系统用户接口的系统调用,进程结构,进程控制,进程调度问题,存储管理策略,通用驱动程序接口,进程间通信和网络问题,"多处理机 Unix 系统",分布式系统}
	系统概貌->{历史,系统结构,处理环境,操作系统服务,关于硬件的假设}
	系统结构->"Unix 指代 Unix 系统内核"
	系统结构->用户看法->{对于文件系统,对于处理环境,对于构件原语}
	处理环境->"Shell 不是系统内核的一部分"
	对于构件原语->{"重定向 I/O",管道}
 	

 	//	内核结构概貌->{文件系统,进程控制,高级问题}
	内核结构概貌->"Unix 体系结构"->"文件是有空间的，进程是有生命的"
	内核结构概貌->系统概念介绍->文件子系统->内核的数据结构->{索引节点表,文件表,用户文件描述符表}

	用户文件描述符表->"文件描述符：系统调用 open 和系统调用 creat，内核返回一个文件描述符，是在用户文件描述符表中的索引值"
	文件子系统->逻辑块->"一个文件系统中逻辑块大小是完全相同的"
	逻辑块结构[shape=record,label="{ 引导块 | 超级快 | 索引节点表 | 数据块}"]
	逻辑块->逻辑块结构
	系统概念介绍->进程子系统->{进程的结构,用户存储管理的若干进程数据结构}
	逻辑块结构->由一些列字节组成，有格式字节被解释成机器指令（正文），数据和栈区
	0进程->创建完1进程后，转化为对换进程
	进程子系统->0进程->1进程->" init 进程"
	逻辑块结构->栈区->由逻辑栈帧组成
	栈区->{用户栈,核心栈}
	逻辑块结构->进程->进程上下文->"被进程正文所定义的进程状态、\l进程的全局用户变量和数据结构的值、\l他使用的及其寄存器的值、\l存储在它的进程表项与 u 区中的值以及它的用户栈和核心栈的内容"
	逻辑块结构->进程->进程状态->{用户态下执行,核心态下执行,未执行,正在睡眠}

	进程->{状态转换,睡眠与唤醒}


	内核结构概貌->内核数据结构

	内核结构概貌->系统管理
	//bread算法读出区块



	系统缓冲区高速缓存机制->{缓冲头部,存储区数值,缓冲池的结构,缓冲区索引,读磁盘块与写磁盘块,高速缓冲的优缺点}
缓冲区头部结构[shape=record,label=" { 设备号| 块号| 状态| 多个指向数据区域的指针}"]
	缓冲头部->缓冲区头部结构
	//高速缓冲的 getblk 算法，brelse 算法


	存取用户文件->文件的内部表示
	磁盘索引节点[shape=record,label=" { 所有者| 小组| 类型| 许可权| 最近一次读文件| 最近一次写文件| 最近一次改变索引节点| 大小| 磁盘地址} | { open creat dup pip close, open creat chdir choroot chown chmod stat link unlink mknod mount umount | creat mknod link unlink | chown chmod stat | read write lseek | mound umount | chdir chown}"]
	文件的内部表示->"4.1 索引节点"->磁盘索引节点

	"4.1 索引节点"->对索引节点的存取->{"算法 iget"}


	"4.1 索引节点"->释放索引节点

	文件的内部表示->"4.2 正规文件结构"
	文件的内部表示->"4.3 目录"
	文件的内部表示->"4.4 路径名到索引节点的转换"->{"算法 namei"}
	文件的内部表示->"4.5 超级块"
	文件的内部表示->"4.6 为新文件分配索引节点"->{"算法 namei"}

	文件的内部表示->"4.7 磁盘块的分配"
	文件的内部表示->"4.8 其它文件类型"->{管道文件,特殊文件}
	特殊文件->{块设备特殊文件,字符设备特殊文件}



	//第五章
	文件系统用户接口的系统调用->文件系统的系统调用->{"返回文件描述符","使用 namei","分配索引节点","文件属性","文件 I/O","文件系统结构","树操作"}


	"返回文件描述符"->"系统调用 open"

	文件系统的系统调用->"系统调用 read"
	文件系统的系统调用->"系统调用 write"
	文件系统的系统调用->"文件输入/输出位置的跳转 lseek"
文件系统的系统调用->"系统调用 close"
文件系统的系统调用->"文件建立"
文件系统的系统调用->"特殊文件的建立"
文件系统的系统调用->"改变目录及根"
文件系统的系统调用->"改变所有者及许可权"
文件系统的系统调用->"系统调用 stat 和 fstat"
文件系统的系统调用->"管道"->{"系统调用 pipe","有名管道的打开","管道的读和写",管道的关闭}
文件系统的系统调用->"系统调用 dup"
文件系统的系统调用->"文件系统的安装和卸载"->{在文件路径名中跨越安装点,文件系统的拆卸（umount）}
文件系统的系统调用->"系统调用 link"
文件系统的系统调用->"系统调用 unlink"->{文件系统的一致性,竞争条件}
文件系统的系统调用->"文件系统的抽象"
文件系统的系统调用->"文件系统维护"

	//第六章 
	进程结构-> {"进程的状态和状态的转化",系统存储方案,进程上下文,进程上下文的保存,进程地址空间的管理,睡眠}

	"进程的状态和状态的转化"->一个进程的生命周期从概念上可分为一组状体


	系统存储方案->{区,页和页表,内核的安排,"u 区"}
	区->区的概念独立于存储管理策略。存储管理策略是由操作系统实施的，存储管理策略是指内核为确保进程公平地共享存储资源所采取的行动

	区->区的概念独立于存储管理的实现，如存储器的分页还是分段

	页和页表->存储管理的硬件将物理存储器分为一些大小相等的块，成为页


	进程上下文->{用户级上下文,寄存器上下文,系统级上下文}



	用户级上下文->"进程的正文、数据、用户栈和共享存储区组成"


	进程上下文的保存->{中断和例外,系统调用的接口,上下文切换,为废弃返回而保存上下文,在系统和用户地址空间之间拷贝数据}

	为废弃返回而保存上下文->发生在必须终止当前的执行顺序，立即从先前保存的上下文执行时



	进程地址空间的管理->{区的上锁和解锁,区的分配,区附接到进程,区大小的改变,区的装入,区的释放,区与进程的断接,区的复制}

	区附接到进程->附接->内核要使一个区和一个进程的地址空间联系起来

	区大小的改变->"sbrk 扩展或压缩虚地址空间，内核内部调用算法growreg来改变区的大小"


	睡眠->{睡眠事件及其地址,"算法 sleep 和 wakeup"}






	//第七章
	进程系统调用以及其他算法的关系[shape=record,label=" 与存储管理有关的系统调用| 与同步有关的系统调用 | 其它"]
	进程控制->进程系统调用以及其他算法的关系
	进程控制->控制进程上下文的系统调用
	进程控制->"系统调用 fork"->{"为新进程在进程表中分配一个空槽","为子进程赋一个唯一的进程标识号（ PID ）","做一个父进程上下文的逻辑副本","增加与该进程相关联的文件表和索引节点表的引用数","对父进程返回子进程的进程号；对子进程返回零"}
	进程控制->"软中断信号"->简称信号，通知进程发生了异步事件。

	"软中断信号"->软中断信号的处理->{"进程收到软中断信号后退出","进程忽略信号","收到信号后执行一个特殊的（ 用户 ）函数"}


	"软中断信号"->{进程组,从进程发送软中断信号}

	进程控制->{"进程终止","等待进程的终止","进程的用户标识号","改变进程的大小","shell 程序","系统自举和进程 init"}
	"改变进程的大小"->"brk"

	"系统自举和进程 init"->自举过程来初始化一个处于非活动状态的系统


	进程调度问题->进程调度和时间

	进程调度问题->"在分时系统中，内核给每个进程分一段 CPU 时间，称为时间片"
	进程调度问题->进程调度->多级反馈循环调度
	进程调度->{公平共享调度,实时处理}

	进程调度问题->有关时间的系统调用->"stime，time，times，alarm"


	有关时间的系统调用->{重新启动时钟,系统的内部定时,直方图分析,记账和统计,计时}




	存储管理策略->对换->{对换设备上的空间管理,将进程换出内存,将进程换入内存}


	对换设备上的空间管理->最新适配算法


	将进程换出内存->{"系统调用 fork 的对换","拓展对换"}

	将进程换入内存->"进程 0"
	存储管理策略->请求调页
	请求调页->请求调页的数据结构->{页表表项,磁盘块描述项,页面数据表,对换使用表}
	请求调页->偷页进程->一个核心进程，将不再是进程工作集的页偷偷地换出内存

	请求调页->页面错->{有效性错,保护错}
	有效性错->如果一个进程企图存取一个有效位为零的页，将产生一个有效错，内核要调用有效错处理程序
	保护错->进程视图存取一个许可位关闭的有效页面所产生的

	请求调页->在简单硬件支持下的请求调页系统


	存储管理策略->对换和请求雕爷的混合系统




	通用驱动程序接口->"输入/输出子系统"->使进程能与外围设备如磁盘、磁带、终端、打印机及网络进行通信，而控制设备的内核模块常称为设备驱动程序

	通用驱动程序接口->驱动程序接口->{块设备,原始（或字符）设备}
	块设备->磁盘和磁带
	原始（或字符）设备->终端和网络截止


	驱动程序接口->系统配置->系统管理员规定与设备有关的参数过程
	驱动程序接口->系统调用与驱动程序接口

	驱动程序接口->中断处理程序



	通用驱动程序接口->磁盘驱动程序
	通用驱动程序接口->终端驱动程序->{"字符表 clist",标准方式下的终端驱动程序,原始方式下的终端驱动程序,终端探询,建立控制终端,间接终端驱动程序,注册到系统}


	建立控制终端->控制终端是用户借以注册到系统去的终端

	通用驱动程序接口->流
	

	进程间通信和网络问题->进程间通信机制允许任意进程间交换数据和同步地执行

	进程间通信和网络问题->管道、有名管道和软中断信号
	//进程间通信和网络问题->IPC->{消息,共享存储区,信号量}
	进程间通信和网络问题->进程跟踪->sdb
	进程间通信和网络问题->"系统 V IPC"->三种机制

	三种机制->{"消息允许进程发送格式化的数据流到任意进程","共享存储区允许进程间共享它们虚地址空间中的部分区域","信号量允许进程间同步地执行"}

	"系统 V IPC"->消息->四个系统调用用于消

	"系统 V IPC"->共享存储区

	"系统 V IPC"->信号量->允许若干进程在一组信号量上原子地做一系列操作以便同步地执行

	"系统 V IPC"->总的评价->"从美学的角度，它们不应当放在进程当中"
	进程间通信和网络问题->网络通信
	网络通信->套接字->不同机器上的进程通信，依赖于协议和信道

	//吞吐量问题
	"多处理机 Unix 系统"->"由共享公共主存以及外围设备的两个或多个 CPU 组成"


	"多处理机 Unix 系统"->多处理机系统的问题->三个方法防止讹误
	
	"多处理机 Unix 系统"->主从处理机解决方法
	"多处理机 Unix 系统"->信号量解决方法->{信号量定义,信号量实现,几个算法}


	几个算法->{缓冲区算法,"系统调用 wait","哑进程"}


	"多处理机 Unix 系统"->{"Tunis 系统",性能局限性}



	分布式系统->分布式系统特点->共享公共存储区和内核数据结构，并从一公共池中调度进程
	分布式系统->分布式系统分类->{卫星系统,"纽卡斯尔分布式系统",透明型分布式文件系统,无存根进程的透明分布式模型}




























}