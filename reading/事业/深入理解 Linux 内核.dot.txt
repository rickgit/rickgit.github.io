digraph g{
rankdir=LR;
"深入理解 Linux 内核"->{绪论,内存寻址,进程,中断和异常,定时测量,内存管理,进程地址空间,系统调用,信号,进程调度,内存同步,虚拟文件系统,"管理 I/O设备",磁盘高速缓存,访问正规文件,交换：释放内存的方法,"Ext 2文件系统",进程通信,程序的执行,附录,参考书目}


绪论->Linus->"借鉴《The Design of The UNIX operating system》1986"
Linus->内核特点->{单块结构,以静态的方式编译和连接,内核线程,支持多线程应用,非抢占式,支持多处理器,文件系统,流}
Linus->"Linux 版本"
绪论->操作系统的基本概念->"任何计算机系统都包含一个基本的程序集合，成为操作系统。最重要的程序称为内核，内核被装入 RAM"
操作系统的基本概念->两个主要目标->{与硬件部分相互作用,为用户程序提供一个执行环境}
操作系统的基本概念->"硬件为 CPU 提供两种执行模式"->{"用户程序的非特权模式，即 Unix 的用户态","内核的特权模式 Unix 的内核态"}


操作系统的基本概念->多用户系统->{认证机制,保护机制,计帐机制}

操作系统的基本概念->{用户和组,_进程}

_进程->执行程序的一个实例


绪论->"Unix 文件系统概述"->文件->"Unix 文件是以一列字节组成的信息载体，内核不解释文件的内容"

"Unix 文件系统概述"->硬链接和软链接->{"ln f1 f2","ln -s f1 f2"}

"Unix 文件系统概述"->文件类型->{正规文件,目录,符号链,块设备文件,字符设备文件,"管道和命名管道",套接字}
"Unix 文件系统概述"->文件描述符与索引节点->索引节点->不包含任何控制信息，如文件长度、文件结束符

索引节点->"POSIX 标准包含"->{文件类型,与文件相关的硬链接个数,以字节为单位的文件长度,设备标识符,索引节点号,"文件拥有者的 UID","文件的 GID","几个时间标记","访问权限和文件模式"}	
"Unix 文件系统概述"->文件操作的系统调用->当用户访问一个正规文件或目录文件的内容时，访问存储在硬件块设备的一些数据
文件操作的系统调用->访问一个打开的文件->"对于正规 UINX 文件，可以顺序地访问，或随机地访问，而对设备文件和命名管道文件，通常只能顺序地访问"

文件操作的系统调用->关闭文件->"释放与文件描述符 fd 相对应的打开文件对象"
文件操作的系统调用->关闭文件->更名及删除文件



绪论->"Unix 内核概述"->"进程/内核模式"->进程是动态的实体，在系统内通常只有有限的生存期。创建、撤销及同步已存在进程的任务都委托给内核中的一组列程来完成。

"进程/内核模式"->内核不是一个进程而是进程的管理者

"Unix 内核概述"->进程的执行->每一个进程由一个进程描述符表示，让内核管理进程

进程的执行->可重入内核->内核控制路径

"Unix 内核概述"->_内存管理->虚拟内存

_内存管理->内存分配器->"KMA 算法"->{资源图分配算法,"2 的幂次方空闲链表","McKusick-Karels 分配算法","伙伴系统","Mach 的区域分配算法","Dynix 分配算法","Solaris 的 slab 分配算法"}

_内存管理->{进程虚拟地址空间的处理,交换与高速缓存}

"Unix 内核概述"->设备驱动程序

内存寻址->内存地址->{逻辑地址,线性地址,物理地址}

内存寻址->硬件的分段单元->地址转换模式->{实模式,保护模式}
硬件的分段单元->逻辑地址组成部分->{段标示符,指定段内相对地址的偏移量}
段标示符->段选择符

硬件的分段单元->段单元->逻辑地址转化为相应的线性地址

段单元->"Linux 的段单元"

内存寻址->硬件的分页单元->线性地址转化为物理地址

硬件的分页单元->拓展分页

//介绍Intel 分段和分页单元把逻辑地址转换为物理地址，RAM的莫部分永久地分配给内核用来存放内核代码以及静态内核数据结构
内存寻址->硬件高速缓存->"微处理器时钟频率接近 GHZ"->{"1GHz 就是每秒十亿次运算","动态 RAM 芯片的存取时间是这个时钟周期的 10 倍左右"}

"动态 RAM 芯片的存取时间是这个时钟周期的 10 倍左右"->引入硬件高速缓存

内存寻址->"Linux 的分页"->三级分页模式->{页全局目录,页中间目录,页表}
"Linux 的分页"->线性地址域

"Linux 的分页"->页表处理
"Linux 的分页"->保留的页框
"Linux 的分页"->进程页表
"Linux 的分页"->内核页表->{临时内核页表,最终的内核页表}
进程->"任何多道程序设计的操作系统中的基本概念，Linux 源码中，进程通常称为任务"

进程->进程描述符

进程->等待队列

进程->进程的使用限制
进程->进程切换->切换内容->{硬件上下文,硬件支持,"Linux 代码",保存浮点寄存器}

进程切换->{任务状态段,"switch_to 宏",保存浮点寄存器}

进程->创建进程->内存线程

创建进程->"进程 0"
进程->撤销进程->{进程终止,删除进程}


中断和异常->中断->为改变处理器执行指令顺序的事件
中断->{同步中断（异常）,异步中断（中断）}


中断和异常->中断信号的作用
中断和异常->"Intel 文档分类"->{中断,异常,故障,陷阱,异常结束,编程异常}

 异步中断（中断）

中断和异常->中断和异常向量->"IRQ 和中断"

中断和异常向量->{中断描述符,中断和异常的硬件处理}


定时测量->硬时钟->{实时时钟,时间标记计数器,可编程间隔定时器}

内存管理->动态内存->"除去分配给内核的空间，RAM 其余部分称为动态内存"
内存管理->{页框管理,内存区管理,非连续内存区管理}

页框管理->"Linux 采用 4KB 页框大小作为标准的内存分配单元"

页框管理->{请求和释放页框,伙伴系统算法}

内存区管理->{"slab 分配器",高速缓存描述符}

进程地址空间->进程的地址空间->进程的地址空间由允许进程使用的全部线性地址组成


进程的地址空间->{内存描述符,线性区}
线性区->{释放线性地址区间}

进程地址空间->{请求调页,写时复制}
进程地址空间->{创建和删除进程的地址空间,堆管理}

系统调用->"Unix 系统利用内核所提供的系统调用（system call）实现了用户态进程和硬件设备之间的大部分结构"

系统调用->"POSIX API 和系统调用"->{"API 只是一个函数定义，说明了如何获得一个给定的服务","系统调用时通过软中断向内核态发出一个明确的请求"}
"POSIX API 和系统调用"->"一些 API 引用了封装例程，唯一目的是发布系统调用"

系统调用->封装例程->"Linux 定义了六个从 _syscall0 到 _syscall5 的宏"




信号->{信号的作用,发送信号,接收信号,忽略信号,捕获信号,实时信号,与信号相关的系统调用}



进程调度->{调度策略,进程的抢占}
调度策略->分时技术

调度策略->进程区分类->{交互式进程,批处理进程,实时进程}
进程的抢占->时间片必须维持长度
调度策略->调度算法


调度策略->{与调度相关的系统调用,与实时进程相关的系统调用}

内核同步->{"SMP 体系结构的一些硬件特征","Linux 内核的 SMP 版本所采用的其它互斥机制"}
"SMP 体系结构的一些硬件特征"->{内核控制路径,同步技术,"SMP 体系结构"}
//第一章介绍进程的竞争条件和临界区概念

同步技术->四种主要类型->{内核态进程的非抢占性,原子操作,关中断,加锁}

加锁->使用内核信号量加锁->"Linux 提供两种锁"->{内核信号量,自旋锁}

使用内核信号量加锁->{"slab 高速缓存链表的信号量",内存描述符的信号量,索引节点的信号量}
使用内核信号量加锁->避免信号量上的死锁

"SMP 体系结构"->硬件特征->{共享内存,硬件高速缓存同步,原子操作,分布式中断处理,"CPU 同步的中断信号"}

共享内存->内存仲裁器

"Linux 内核的 SMP 版本所采用的其它互斥机制"->{下半部分处理,全局内核锁和局部内核锁,处理器间中断}

//第十二章 讨论 Linux 虚拟文件系统的设计目标、结构及其实现。集中讨论五个标准文件中的正规文件、目录文件和符号链接文件
虚拟文件系统->在内核的内存中表示文件和文件系统的对象包含着广泛的信息

虚拟文件系统->"也可以称为 VFS"->支持的主要类型->{基于磁盘的文件系统,网络文件系统,特殊文件系统}

虚拟文件系统->通用文件模型->{超级块对象,索引节点对象,文件对象,目录项对象}

目录项对象->目录项的高速缓存

虚拟文件系统->与进程相关的文件
虚拟文件系统->虚拟文件系统的安装->{文件系统的注册,安装根文件系统,安装一个普通的文件系统,卸载一个文件系统,路径名的查找}
虚拟文件系统->{"VFS 系统调用的实现",文件加锁}


//第十三章 着重字符设备和块设备
"管理 I/O 设备"->"说明 Linux 设备驱动程序的整体组织结构"->"O`Reilly，Alessandro Rubini，《Linux Device Drivers》"


"管理 I/O 设备"->"I/O 体系结构"->总线->"让信息在连接个人计算机的 CPU、RAM 和 I/O 设备之间流动的数据通道"

总线->总线的三种专用类型->{数据总线,地址总线,控制总线}

总线->"I/O 总线"->"连接的是 CPU 和 I/O设备时的总线"
"I/O 总线"->硬件构建层次->{"I/O 端口","I/O接口","设备控制器"}

"I/O接口"->{"专用 I/O 接口","通用 I/O 接口"}
"专用 I/O 接口"->{键盘接口,图形接口,硬盘接口,总线鼠标接口,网络接口}

"通用 I/O 接口"->{并口,串口,通用串行接口,"PCMCIA 接口","SCSI 接口"}

//第十三章 目录项高速缓存是 VFS 用来把文件路径名加速转换成对应的索引节点
磁盘高速缓存 ->{缓冲区高速缓存,页高速缓存}

缓冲区高速缓存->存放缓冲区的磁盘高速缓存
页高速缓存->存放页框的磁盘高速缓存




进程通信->{"Unix 系统的基本机制","Linux 中所特有的允许进程间通信"}

"Linux 中所特有的允许进程间通信"->{"管道和 FIFO（命名管道）",信号量,消息,共享内存区}


程序的执行->程序是以可执行文件的形式存放在磁盘上的，可执行文件既包括执行函数的目标代码也包括这些函数所使用的数据

程序的执行->{可执行文件,可执行格式,执行域}


可执行文件->进程的信任状和能力
执行域->"exec 类函数"




附录->{系统启动,模块,源代码结构}











参考书目->{"有关 Unix 内核的书","有关 Linux 内核的书","有关 PC 体系结构的书和 Intel 80X86的技术手册",其它在线文档资源}



}