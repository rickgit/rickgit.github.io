@startuml

skinparam monochrome true
skinparam classBackgroundColor transparent
skinparam style strictuml
skinparam shadowing false

class init_c {
	

}


note top of init_c
http://www.cnblogs.com/rocomp/p/5001639.html
init进程 –> Zygote进程 –> SystemServer进程 –>各种应用进程

1.首先Bootloader引导程序启动完Linux内核后，
会加载各种驱动和数据结构，
当有了驱动以后，开始启动Android系统，
同时会加载用户级别的第一个进程init(system\core\init.c),
该进程会首先加载一个init.rc配置文件


end note

class init_rc{
	

}
note top of init_rc
init.rc配置文件会进行很多的配置，
创建很多的文件夹及文件，
然后初始化一些Android驱动器，
之后该配置文件最重要的一个任务就是启动一个Zygote(孵化器)进程，
此进程是Android系统的一个母进程，
用来启动Android的其他服务进程
end note



class app_process{
	
}

note top of app_process
Zygote会执行一个app_process可执行文件，
在这个文件中首先添加了Android运行时环境，
在Android运行时中调用了ZygoteInit.java，
这就从c++代码跳到了java代码


end note

class ZygoteInit {
	+ {static} void main(String argv[])
	- static void registerZygoteSocket(String socketName)
	static void preload()
	/**
	** Zygote fork出SystemServer进程
	**/
	- static boolean startSystemServer(String abiList, String socketName)
}

note left of ZygoteInit
在ZytofeInit.java代码中首先设置了Java虚拟机的堆内存空间，
然后启动一个类加载器加载Android启动依赖的类比如Activity等四大组件，
dialog等UI的类，然后分出一个子进程启动SystemServer系统服务.

android系统中进程之间通讯的方式是Binder，
但是有一个例外是SystemService进程与Zygote进程之间是通过Socket的方式进行通讯的

preloadClasses()用于初始化Zygote中需要的class类； 
preloadResources()用于初始化系统资源； 
preloadOpenGL()用于初始化OpenGL； 
preloadSharedLibraries()用于初始化系统libraries； 
preloadTextResources()用于初始化文字资源； 
prepareWebViewInZygote()用于初始化webview;
end note

class Zygote{
	private static final ZygoteHooks VM_HOOKS = new ZygoteHooks();
	public static int forkSystemServer()
	native private static int nativeForkSystemServer()
}
class ZygoteHooks {
	
}

class SystemServer {
	private ActivityManagerService mActivityManagerService;
	private PackageManagerService mPackageManagerService;

	+ {static}  void main(String[] args)

	private void startBootstrapServices()
	private void startCoreServices()
	private void startOtherServices()
}
note top of SystemServer
在SystemServer.java代码中有两个方法

startBootstrapServices() 主要用于启动系统Boot级服务 
startCoreServices() 主要用于启动系统核心的服务 
startOtherServices() 主要用于启动一些非紧要或者是非需要及时启动的服务


end note


class SystemServiceManager {
	- final ArrayList<SystemService> mServices = new ArrayList<SystemService>();
}
note right of SystemServiceManager

SystemServer进程主要是用来构建系统各种service服务的，
而SystemServiceManager就是这些服务的管理对象。
end note


class com_android_server_SystemServer_cpp {
	int system_init();

}
note top of com_android_server_SystemServer_cpp
SystemServer首先调用init1()方法加载JNI库，
启动Native世界。
init1通过System.loadLibrary("android-servers")加载一个类库文件，
其对应的源码文件为com_android_server_SystemServer.cpp 
其C++代码如下，在该类库中转调了system_init()
end note


class System_init_cpp{
	int system_init();
}
note left of System_init_cpp
System_init方法在System_init.cpp中实现，
它首先启动系统的硬件服务，比如Audio、Camera等，
启动完硬件服务后它又通过Android运行时环境调用了
SystemServer中的init2()方法，
init2()方法启动Framework世界
end note

class ServerThread {
	
}
note top of ServerThread
init2()启动的线程ServerThread中的的run方法中
通过一个Looper开启了Android中的各种服务比如LightService，
PowerManagerService，BatteryService，WindowManagerService等，
并将服务添加到ServiceManager中去管理
end note

class ActivityManagerService {
	final ActivityStarter mActivityStarter;


	+ void systemReady(final Runnable goingCallback)
	# boolean startHomeActivityLocked(int userId, String reason)
	# Intent getHomeIntent()
}
note left of ActivityManagerService
	启动完各种服务后，调用ActivityManagerService.systemReady方法,
	打开Android系统的第一个Activity
	<pre>
		 mActivityStarter.startHomeActivityLocked(intent, aInfo, reason);
	</pre>

end note
class ActivityStarter {
	void startHomeActivityLocked(Intent intent, ActivityInfo aInfo, String reason)
	final void scheduleResumeTopActivities()
}

class ActivityStackSupervisor{
	final void scheduleResumeTopActivities()

}

 


init_c --> init_rc
init_rc --> app_process
app_process --> ZygoteInit
ZygoteInit --> SystemServer
SystemServer --> com_android_server_SystemServer_cpp
com_android_server_SystemServer_cpp --> System_init_cpp
System_init_cpp --> SystemServer
SystemServer --> ServerThread
ServerThread --> ActivityManagerService
ActivityManagerService --> ActivityStarter
ActivityStarter --> ActivityStackSupervisor
ZygoteInit ..> Zygote
Zygote ..> ZygoteHooks
SystemServer --> SystemServiceManager
SystemServiceManager --> SystemServer


abstract class SystemService{
	
}
class Installer extends SystemService{
	- final InstallerConnection mInstaller;
	
}
class InstallerConnection {
	public void waitForConnection()
}
note right of InstallerConnection

不断的通过ping命令连接Zygote进程
（SystemServer和Zygote进程通过socket方式通讯，其他进程通过Binder方式通讯）
end note


class ActivityManagerService extends ActivityManagerNative{
	
}
note right of ActivityManagerService
为其设置SysServiceManager和Installer。
ActivityManagerService是系统中一个非常重要的服务，
Activity，service，Broadcast，contentProvider都需要通过其余系统交互。
end note


class Lifecycle extends SystemService{
	private final ActivityManagerService mService;
}

class PowerManagerService extends SystemService{
	
}
note right of PowerManagerService
PowerManagerService主要用于计算系统中和Power相关的计算，
然后决策系统应该如何反应。
同时协调Power如何与系统其它模块的交互，
比如没有用户活动时，屏幕变暗等等。
end note
class LightsService extends SystemService{
	
}

note right of LightsService
手机中关于闪光灯，LED等相关的服务
end note

class DisplayManagerService extends SystemService{
	
}

class PackageManagerService extends IPackageManager.Stub{
	public static PackageManagerService main()

}
note right of PackageManagerService
apk文件的安装，解析，删除，卸载等等操作。

end note
SystemServer ..> Installer

Installer --> InstallerConnection

Lifecycle --+ ActivityManagerService
SystemServer --> ActivityManagerService
Lifecycle --> ActivityManagerService
SystemServer --> PowerManagerService
SystemServer ..> LightsService
SystemServer --> DisplayManagerService

SystemServer --> PackageManagerService







@enduml